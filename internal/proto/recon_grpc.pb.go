// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReconClient is the client API for Recon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReconClient interface {
	// Compare two entities to determine if they are the same entity.
	CompareEntities(ctx context.Context, in *CompareEntitiesRequest, opts ...grpc.CallOption) (*CompareEntitiesResponse, error)
	// Resolve a list of entities, given their descriptions.
	ResolveEntities(ctx context.Context, in *ResolveEntitiesRequest, opts ...grpc.CallOption) (*ResolveEntitiesResponse, error)
	// Resolve a list of places, given their latitude and longitude coordinates.
	ResolveCoordinates(ctx context.Context, in *ResolveCoordinatesRequest, opts ...grpc.CallOption) (*ResolveCoordinatesResponse, error)
	// Resolve a list of IDs, given the input prop and output prop.
	ResolveIds(ctx context.Context, in *ResolveIdsRequest, opts ...grpc.CallOption) (*ResolveIdsResponse, error)
}

type reconClient struct {
	cc grpc.ClientConnInterface
}

func NewReconClient(cc grpc.ClientConnInterface) ReconClient {
	return &reconClient{cc}
}

func (c *reconClient) CompareEntities(ctx context.Context, in *CompareEntitiesRequest, opts ...grpc.CallOption) (*CompareEntitiesResponse, error) {
	out := new(CompareEntitiesResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Recon/CompareEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reconClient) ResolveEntities(ctx context.Context, in *ResolveEntitiesRequest, opts ...grpc.CallOption) (*ResolveEntitiesResponse, error) {
	out := new(ResolveEntitiesResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Recon/ResolveEntities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reconClient) ResolveCoordinates(ctx context.Context, in *ResolveCoordinatesRequest, opts ...grpc.CallOption) (*ResolveCoordinatesResponse, error) {
	out := new(ResolveCoordinatesResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Recon/ResolveCoordinates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reconClient) ResolveIds(ctx context.Context, in *ResolveIdsRequest, opts ...grpc.CallOption) (*ResolveIdsResponse, error) {
	out := new(ResolveIdsResponse)
	err := c.cc.Invoke(ctx, "/datacommons.Recon/ResolveIds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReconServer is the server API for Recon service.
// All implementations should embed UnimplementedReconServer
// for forward compatibility
type ReconServer interface {
	// Compare two entities to determine if they are the same entity.
	CompareEntities(context.Context, *CompareEntitiesRequest) (*CompareEntitiesResponse, error)
	// Resolve a list of entities, given their descriptions.
	ResolveEntities(context.Context, *ResolveEntitiesRequest) (*ResolveEntitiesResponse, error)
	// Resolve a list of places, given their latitude and longitude coordinates.
	ResolveCoordinates(context.Context, *ResolveCoordinatesRequest) (*ResolveCoordinatesResponse, error)
	// Resolve a list of IDs, given the input prop and output prop.
	ResolveIds(context.Context, *ResolveIdsRequest) (*ResolveIdsResponse, error)
}

// UnimplementedReconServer should be embedded to have forward compatible implementations.
type UnimplementedReconServer struct {
}

func (UnimplementedReconServer) CompareEntities(context.Context, *CompareEntitiesRequest) (*CompareEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareEntities not implemented")
}
func (UnimplementedReconServer) ResolveEntities(context.Context, *ResolveEntitiesRequest) (*ResolveEntitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveEntities not implemented")
}
func (UnimplementedReconServer) ResolveCoordinates(context.Context, *ResolveCoordinatesRequest) (*ResolveCoordinatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveCoordinates not implemented")
}
func (UnimplementedReconServer) ResolveIds(context.Context, *ResolveIdsRequest) (*ResolveIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveIds not implemented")
}

// UnsafeReconServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReconServer will
// result in compilation errors.
type UnsafeReconServer interface {
	mustEmbedUnimplementedReconServer()
}

func RegisterReconServer(s grpc.ServiceRegistrar, srv ReconServer) {
	s.RegisterService(&Recon_ServiceDesc, srv)
}

func _Recon_CompareEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReconServer).CompareEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Recon/CompareEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReconServer).CompareEntities(ctx, req.(*CompareEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recon_ResolveEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReconServer).ResolveEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Recon/ResolveEntities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReconServer).ResolveEntities(ctx, req.(*ResolveEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recon_ResolveCoordinates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveCoordinatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReconServer).ResolveCoordinates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Recon/ResolveCoordinates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReconServer).ResolveCoordinates(ctx, req.(*ResolveCoordinatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recon_ResolveIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReconServer).ResolveIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datacommons.Recon/ResolveIds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReconServer).ResolveIds(ctx, req.(*ResolveIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Recon_ServiceDesc is the grpc.ServiceDesc for Recon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datacommons.Recon",
	HandlerType: (*ReconServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CompareEntities",
			Handler:    _Recon_CompareEntities_Handler,
		},
		{
			MethodName: "ResolveEntities",
			Handler:    _Recon_ResolveEntities_Handler,
		},
		{
			MethodName: "ResolveCoordinates",
			Handler:    _Recon_ResolveCoordinates_Handler,
		},
		{
			MethodName: "ResolveIds",
			Handler:    _Recon_ResolveIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recon.proto",
}
