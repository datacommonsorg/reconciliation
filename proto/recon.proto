// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto2";

// Use relative go package so the generated file is in the current folder.
option go_package = "./proto";
package datacommons;

import "google/api/annotations.proto";
import "Mcf.proto";

message IdWithProperty {
  optional string prop = 1;
  optional string val = 2;
}

message EntityIds {
  repeated IdWithProperty ids = 1;
}

// An entity is represented by a subgraph, which contains itself and its neighbors.
message EntitySubGraph {
  // REQUIRED: source_id must be a key within `sub_graph.nodes`, or one of the `ids`.
  optional string source_id = 1;
  oneof graph_representation {
    McfGraph sub_graph = 2;
    EntityIds entity_ids = 3;
  }
}

message EntityPair {
  optional EntitySubGraph entity_one = 1;
  optional EntitySubGraph entity_two = 2;
}

message CompareEntitiesRequest {
  repeated EntityPair entity_pairs = 1;
}

message CompareEntitiesResponse {
  message Comparison {
    optional string source_id_one = 1;
    optional string source_id_two = 2;
    optional double probability = 3;
  }
  repeated Comparison comparisons = 1;
}

message ResolveEntitiesRequest {
  repeated EntitySubGraph entities = 1;
  // The properties of IDs to find. If empty, all known IDs are returned.
  repeated string wanted_id_properties = 2;
}

message ResolveEntitiesResponse {
  message ResolvedId {
    repeated IdWithProperty ids = 1;
    optional double probability = 2;
  }
  message ResolvedEntity {
    optional string source_id = 1;
    repeated ResolvedId resolved_ids = 2;
  }
  repeated ResolvedEntity resolved_entities = 1;
}

service Recon {
  // Compare two entities to determine if they are the same entity.
  rpc CompareEntities(CompareEntitiesRequest)
  returns (CompareEntitiesResponse) {
    option (google.api.http) = {
      post: "/entity/compare"
      body: "*"
    };
  }

  // Resolve a list of entities, given their descriptions.
  rpc ResolveEntities(ResolveEntitiesRequest) 
  returns(ResolveEntitiesResponse) {
    option (google.api.http) = {
      post: "/entity/resolve"
      body: "*"
    }; 
  }
}
